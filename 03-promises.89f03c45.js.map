{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAkBpC,SAASC,EAAeC,EAAQC,EAAOC,EAAMC,EAAW,GACtD,GAAIA,GAAYH,EAAQ,CACtB,MAAMI,EAAeH,GAASE,EAAW,GAAKD,GAkB3BG,EAhBLF,EAgBeG,EAhBLF,EAiBnB,IAAIG,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,KAxBNO,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBQ,EAAApB,GAASqB,OAAOC,QACd,uBAAqBX,QAAiBD,OAExCL,EAAeC,EAAQM,EAAOJ,EAAMG,EAAW,EAAE,IAElDY,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBQ,EAAApB,GAASqB,OAAOG,QACd,sBAAoBb,QAAeD,OAErCL,EAAeC,EAAQM,EAAOJ,EAAMG,EAAW,EAAE,G,CAKzD,IAAuBA,EAAUC,C,CApCjCQ,EAAApB,GAASqB,OAAOI,KAAK,CACnBC,MAAO,QAEPC,QAAS,OAGXzB,EAAK0B,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,MAAMlB,EAAQmB,SAAS7B,EAAK8B,SAASpB,MAAMqB,OACrCzB,EAAOuB,SAAS7B,EAAK8B,SAASxB,KAAKyB,OAGzC5B,EAFe0B,SAAS7B,EAAK8B,SAAS1B,OAAO2B,OAEtBrB,EAAOJ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nNotiflix.Notify.init({\n  width: '300px',\n  // position: 'right-top',\n  timeout: 3500,\n});\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  createPromises(amount, delay, step);\n});\n\nfunction createPromises(amount, delay, step, position = 1) {\n  if (position <= amount) {\n    const currentDelay = delay + (position - 1) * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${currentDelay}ms`\n        );\n        createPromises(amount, delay, step, position + 1);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${currentDelay}ms`\n        );\n        createPromises(amount, delay, step, position + 1);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromises","amount","delay1","step","position1","currentDelay","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","init","width","timeout","addEventListener","event","preventDefault","parseInt","elements","value"],"version":3,"file":"03-promises.89f03c45.js.map"}